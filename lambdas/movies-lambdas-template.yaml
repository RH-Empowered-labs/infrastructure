Description: Lambda Stack Template

Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
    ManagedPolicyArns: # Add this section
      - 'arn:aws:iam::aws:policy/AdministratorAccess'

  MoviesLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'movies'
      Handler: 'index.handler'
      Role: !GetAtt [LambdaExecutionRole, Arn]
      Runtime: 'nodejs18.x'
      Code:
        ZipFile: |
          exports.handler = async function(event, context) {
              console.log('placeholder function')
          }

  MoviesLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt [MoviesLambdaFunction, Arn]
      Principal: 'apigateway.amazonaws.com'

  UsersLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'users'
      Handler: 'index.handler'
      Role: !GetAtt [LambdaExecutionRole, Arn]
      Runtime: 'nodejs18.x'
      Code:
        ZipFile: |
          exports.handler = async function(event, context) {
              console.log('placeholder function')
          }

  UsersLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt [UsersLambdaFunction, Arn]
      Principal: 'apigateway.amazonaws.com'

Outputs:
  MoviesLambdaFunctionArn:
    Description: 'ARN of the Movies Lambda Function'
    Value: !GetAtt [MoviesLambdaFunction, Arn]
    Export:
      Name: MoviesLambdaFunctionArn

  UsersLambdaFunctionArn:
    Description: 'ARN of the Users Lambda Function'
    Value: !GetAtt [UsersLambdaFunction, Arn]
    Export:
      Name: UsersLambdaFunctionArn